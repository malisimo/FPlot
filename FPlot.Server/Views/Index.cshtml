@model FPlot.Models.Message
@{
    Layout = "_Layout";
}
@{
    await Html.RenderPartialAsync("Partial");
}

<script>    
    function openWebSocket(appData) {
        var socket = new WebSocket('wss://localhost:5001/ws')
        socket.onopen = function () {
            @* console.log('INFO: WebSocket opened successfully'); *@
        }
        socket.onclose = function (event) {
            @* console.log('INFO: WebSocket closed'); *@
            console.log('INFO: WebSocket closed');
            console.log(event);
            openWebSocket(appData);
        }
        socket.onerror = function (error) {
            console.log('ERROR: WebSocket error');
            console.log(error);
        }
        socket.onmessage = function (messageEvent) {
            let curChart = appData.charts[0];
            console.log('Got websocket message');
            messageObj = JSON.parse(messageEvent.data);
            console.log(messageObj);
            UpdateChartElement(appData.charts[0], JSON.parse(messageObj.json));
        }
        appData.socket = socket;
    }

    window.addEventListener('load', 
        function () {            
            var appData = {
                charts:[],
                socket:null
            };

            InitApp();

            let myChart = {
                title: { text: 'Example plot' },
                yAxis: { title: { text: 'Value' } },
                xAxis: { title: { text: 'Index' } },
                legend: { layout: 'vertical', align: 'right', verticalAlign: 'middle' },
                series: [
                    { name: 'A', data: [1.2, 1.4, 0.8, 0.6, 0.95, 0.35, 0.6, 0.25] },
                    { name: 'B', data: [0.1, 0.25, 0.2, 0.5, 0.4, 0.8, 1.35, 1.1] },
                    { name: 'C', data: [0.8, 0.7, 0.45, 1.15, 0.5, 0.85, 0.65, 0.75] }
                ]
            };

            appData.charts.unshift(InitChartElement({ id: 'chart_1', highCharts: myChart }, "chartContainer"));

            openWebSocket(appData);
        }, false);
</script>